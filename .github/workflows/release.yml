# .github/workflows/release.yml
# Workflow que replica o Dockerfile.

name: Create Release

# Gatilho: Executa ao criar uma tag no formato v* (ex: v1.0.0)
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    # Ambiente: Máquina virtual Ubuntu 22.04, idêntico à base do Dockerfile.
    runs-on: ubuntu-22.04

    steps:
      # ETAPA 1: CHECKOUT DO CÓDIGO FONTE
      - name: Checkout repository
        uses: actions/checkout@v4

      # ETAPA 2: INSTALAÇÃO DAS DEPENDÊNCIAS DO AMBIENTE (CÓPIA 1:1 DO DOCKERFILE)
      - name: Install Environment Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git \
            subversion \
            python3 \
            python3-pip \
            dos2unix \
            wget \
            unzip \
            binutils-mingw-w64 \
            libgtk2.0-dev
          # Remove caches do apt para espelhar o Dockerfile
          sudo rm -rf /var/lib/apt/lists/*

      # ETAPA 3: CRIAR SYMLINK PARA WINDRES (REPLICANDO O DOCKERFILE)
      # Passo crítico para compilação de recursos do Windows no Linux.
      - name: Create windres symlink
        run: sudo ln -s /usr/bin/x86_64-w64-mingw32-windres /usr/bin/windres

      # ETAPA 4: INSTALAR FPCLAZUP (REPLICANDO O DOCKERFILE)
      - name: Install fpclazup
        run: |
          sudo wget https://github.com/LongDirtyAnimAlf/Reiniero-fpcup/releases/download/v2.4.0f/fpclazup-x86_64-linux -O /usr/local/bin/fpclazup
          sudo chmod +x /usr/local/bin/fpclazup

      # ETAPA 5: INSTALAR LAZARUS COM VERSÕES ESPECÍFICAS (REPLICANDO O DOCKERFILE)
      - name: Install Lazarus and FPC
        run: fpclazup --noconfirm --lazversion=3.6 --fpcversion=3.2.2 --installdir=$HOME/development

      # ETAPA 6: CONFIGURAR PATH DO AMBIENTE (REPLICANDO O DOCKERFILE)
      # Adiciona o Lazarus ao PATH do workflow para que os scripts o encontrem.
      - name: Add Lazarus to PATH
        run: echo "$HOME/development/lazarus" >> $GITHUB_PATH

      # ETAPA 7: CACHE DAS DEPENDÊNCIAS DO PROJETO
      - name: Cache Project Dependencies
        id: cache-project-deps
        uses: actions/cache@v4
        with:
          path: |
            ../acbr
            ../horse-master
            ../handle-exception
            ../jhonson
            ../fortesreport-ce4
            ../powerpdf
          key: ${{ runner.os }}-project-deps-${{ hashFiles('nfmonitorsrc/download.sh') }}

      # ETAPA 8: EXECUÇÃO DO SCRIPT DE DOWNLOAD
      - name: Run download.sh
        if: steps.cache-project-deps.outputs.cache-hit != 'true'
        run: |
          chmod +x nfmonitorsrc/download.sh
          ./nfmonitorsrc/download.sh

      # ETAPA 9: INSTALAR DEPENDÊNCIAS PYTHON (REPLICANDO O DOCKERFILE)
      - name: Install Python dependencies
        run: pip3 install tqdm

      # ETAPA 10: EXECUÇÃO DO SCRIPT DE BUILD
      - name: Run build.sh
        working-directory: ./nfmonitorsrc
        run: |
          # Garante o formato de arquivo correto para os scripts
          dos2unix build.sh download.sh
          chmod +x build.sh
          ./build.sh

      # ETAPA 11: EMPACOTAMENTO DO EXECUTÁVEL
      - name: Package Artifact
        run: |
          # O build.sh gera o executável em 'nfmonitorsrc/ACBRWebService'.
          # O nome do arquivo zip reflete a arquitetura para clareza.
          zip -j release/ACBRWebService-linux-x86_64.zip nfmonitorsrc/ACBRWebService
        
      # ETAPA 12: CRIAÇÃO DO RELEASE NO GITHUB
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: release/ACBRWebService-linux-x86_64.zip